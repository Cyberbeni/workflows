name: Swift test

# on:
#   pull_request:
#   push:
#     branches: master

on:
  workflow_call:

jobs:
  swift-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare
        id: prepare
        shell: bash
        run: |
          OS="$(uname -s)"
          if [[ "$OS" = "Linux" ]]; then
            source /etc/os-release
            echo "CACHE_PREFIX=$OS-$(arch)-$ID-$VERSION_ID" >> $GITHUB_ENV
          else
            echo "CACHE_PREFIX=$OS-$(arch)" >> $GITHUB_ENV
          fi
          if grep -q \.testTarget\( Package.swift ; then
            echo "HAS_TEST=true" >> $GITHUB_ENV
          else
            echo "HAS_TEST=false" >> $GITHUB_ENV
          fi
      - name: Xcode select
        if: ${{ runner.os == 'macOS' }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - uses: actions/cache@v4
        with:
          path: .build
          key: swift-test-${{ env.CACHE_PREFIX }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            swift-test-${{ env.CACHE_PREFIX }}-
      - name: Build
        shell: bash
        run: |
          set -o pipefail
          swift build --only-use-versions-from-resolved-file
      - name: Test
        if: ${{ env.HAS_TEST == 'true' }}
        shell: bash
        run: |
          set -o pipefail
          # TODO: xcbeautify when it properly formats swif-testing errors
          swift test --only-use-versions-from-resolved-file
